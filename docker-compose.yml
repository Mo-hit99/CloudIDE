version: '3.9'

# ‚òÅÔ∏è Cloud IDE - Development Environment
# Optimized Docker Compose configuration for development with hot reloading

services:
  # üçÉ MongoDB Database - Latest stable version with optimized settings
  mongo:
    image: mongo:8.0
    container_name: cloud-ide-mongo
    restart: unless-stopped
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-password123}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-cloudIDE}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - cloud-ide-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # üü¢ Backend API Server - Node.js with Express and Docker integration
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=18-alpine
    container_name: cloud-ide-backend
    restart: unless-stopped
    privileged: true  # Required for Docker socket access and container management
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    env_file:
      - ./backend/.env
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      # Docker socket mounting for container management
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - MONGO_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-password123}@mongo:27017/${MONGO_INITDB_DATABASE:-cloudIDE}?authSource=admin
      - NODE_ENV=${NODE_ENV:-development}
      - FRONTEND_URL=http://localhost:${FRONTEND_PORT:-5173}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - JWT_SECRET=${JWT_SECRET:-your-development-secret-key}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=http://localhost:${FRONTEND_PORT:-5173}
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - cloud-ide-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ‚öõÔ∏è Frontend React Application - Beautiful responsive UI with Vite
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=18-alpine
    container_name: cloud-ide-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:${BACKEND_PORT:-5000}
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_APP_NAME=Cloud IDE
      - VITE_APP_VERSION=2.0.0
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5173"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - cloud-ide-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'



# üíæ Named volumes for persistent data storage
volumes:
  mongo-data:
    driver: local
    name: cloud-ide-mongo-data
    labels:
      - "cloud-ide.volume=database"
      - "cloud-ide.environment=development"
  mongo-config:
    driver: local
    name: cloud-ide-mongo-config
    labels:
      - "cloud-ide.volume=database-config"
      - "cloud-ide.environment=development"

# üåê Custom network for secure service communication
networks:
  cloud-ide-network:
    driver: bridge
    name: cloud-ide-network
    labels:
      - "cloud-ide.network=main"
      - "cloud-ide.environment=development"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1